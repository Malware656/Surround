package com.malware.permissions

import android.Manifest
import android.content.DialogInterface
import android.content.DialogInterface.*
import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.provider.Settings
import android.util.Log
import android.view.View
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.google.android.material.dialog.MaterialAlertDialogBuilder
import com.google.android.material.snackbar.BaseTransientBottomBar.LENGTH_INDEFINITE
import com.google.android.material.snackbar.Snackbar
import kotlin.system.exitProcess

class MainActivity : AppCompatActivity(), ActivityCompat.OnRequestPermissionsResultCallback{
    var mLayout: View? = null;

    val permissions = {Manifest.permission.READ_EXTERNAL_STORAGE}
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        mLayout = findViewById(R.id.main_layout)
        getPermission()
    }

    private fun getPermission(){
        val requestPermissionLauncher =
            registerForActivityResult(
                ActivityResultContracts.RequestPermission()
            ) { isGranted: Boolean ->
                if (isGranted) {
                    Toast.makeText(this, "Permission Granted", Toast.LENGTH_SHORT).show();
                } else {
                    var snack = Snackbar.make(this, mLayout!!, "Please grant proper permissions to proceed!" as CharSequence, LENGTH_INDEFINITE)
                        .setAction(
                            "Ok"
                        ) {
                            openAppSettings()
                        }

                    Log.e("TAG", snack.view.toString())
                    snack.show()
                }
            }

        when {
            ContextCompat.checkSelfPermission(
                this, Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED -> {
                Toast.makeText(this, "Permission Granted", Toast.LENGTH_SHORT).show();
            }
            shouldShowRequestPermissionRationale(Manifest.permission.READ_EXTERNAL_STORAGE) -> {
                Toast.makeText(this, "Unable to request anymore perms!", Toast.LENGTH_SHORT).show();
                openPermissionDialog()
            }
            else -> {
                requestPermissionLauncher.launch(
                    Manifest.permission.READ_EXTERNAL_STORAGE)
            }
        }
    }
    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        when(requestCode){
            0 -> {
                if(grantResults[0] == PackageManager.PERMISSION_GRANTED){
                    Toast.makeText(this, "Permission Granted", Toast.LENGTH_SHORT).show();
                }
                else{
                    openPermissionDialog()
                }
                return;
            }
        }
    }
    private fun openPermissionDialog(){
        MaterialAlertDialogBuilder(this)
            .setTitle("Permission Needed")
            .setMessage("Please provide proper permission to access media files")
            .setCancelable(false)
            .setPositiveButton("Go to Settings") { _, _ -> openAppSettings() }
            .setNegativeButton("Exit") { _, _ -> exitProcess(0) }
            .show()
    }
    private fun openAppSettings(){
        val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
        val uri: Uri = Uri.fromParts("package", packageName, null);
        intent.data = uri;
        startActivity(intent);
    }

}