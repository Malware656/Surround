package com.malware.surround.screens;

import android.content.ContentUris;
import android.content.res.Resources;
import android.database.Cursor;
import android.graphics.Color;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.android.material.bottomsheet.BottomSheetBehavior;
import com.malware.surround.R;
import com.malware.surround.adapters.BottomSheetInterface;
import com.malware.surround.adapters.SongListAdapter;
import com.malware.surround.models.SongInfo;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Random;

public class SongListActivity extends AppCompatActivity implements BottomSheetInterface {
    private BottomSheetBehavior bottomSheet = null;
    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        bottomSheet = BottomSheetBehavior.from( findViewById(R.id.bottom_sheet));
        bottomSheet.setHideable(true);
        bottomSheet.setState(BottomSheetBehavior.STATE_HIDDEN);
        bottomSheet.addBottomSheetCallback(bottomSheetCallBack);
        bottomSheet.setPeekHeight(120);
        ArrayList<String> songs = new ArrayList<String>();
        songs.add("Song 2");
        songs.add("Song 2");
        songs.add("Song 2");
        songs.add("Song 2");
        songs.add("Song 2");

        RecyclerView recyclerView = findViewById(R.id.songsList);
        ArrayList<SongInfo> songList = (ArrayList<SongInfo>) getSongs();
        SongListAdapter adapter = new SongListAdapter(songList, this);
        recyclerView.setLayoutManager(new LinearLayoutManager(this));
        recyclerView.setAdapter(adapter);

        getSongs();
    }

    private BottomSheetBehavior.BottomSheetCallback bottomSheetCallBack = new BottomSheetBehavior
            .BottomSheetCallback(){
        public void onSlide (View bottomSheet, float slideOffset){
            RelativeLayout miniPlayerLayout = findViewById(R.id.included_mini_player);
            ConstraintLayout fullScreenPlayerlayout = findViewById(R.id.included_full_screen_player);
            if(fullScreenPlayerlayout != null) {
                if (slideOffset > 0.1) {
                    miniPlayerLayout.setAlpha(1 - slideOffset);
                }
                else {
                    miniPlayerLayout.setVisibility(View.VISIBLE);
                    miniPlayerLayout.setAlpha(1);
                }
                fullScreenPlayerlayout.setAlpha(slideOffset);
            }
        }

        public void onStateChanged (View bottomSheet, int newState){
            CoordinatorLayout layout = findViewById(R.id.co_ordinate_layout);
            RelativeLayout relativeLayout = layout.findViewById(R.id.included_mini_player);
            ConstraintLayout constraintLayout = findViewById(R.id.included_full_screen_player);
            TextView title = relativeLayout.findViewById(R.id.mini_song_name);
            if(title != null) {
                switch (newState) {
                    case BottomSheetBehavior.STATE_HIDDEN:
                    case BottomSheetBehavior.STATE_DRAGGING:
                    case BottomSheetBehavior.STATE_SETTLING:
                        break;
                    case BottomSheetBehavior.STATE_EXPANDED:
//                        constraintLayout.setVisibility(View.VISIBLE);
                        break;
                    case BottomSheetBehavior.STATE_COLLAPSED:
//                        constraintLayout.setVisibility(View.INVISIBLE);
                        relativeLayout.setVisibility(View.VISIBLE);
                        break;
                }
            }
        }
    };
    private List<SongInfo> getSongs(){
        Random rnd = new Random();
        List<SongInfo> songInfoList = new ArrayList<>();
        String orderBy = MediaStore.Video.Media.DISPLAY_NAME + " COLLATE NOCASE ASC";
        Uri uri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;
        String[] projection = {MediaStore.Audio.AudioColumns.DATA, MediaStore.Audio.AudioColumns.ALBUM, MediaStore.Audio.ArtistColumns.ARTIST, MediaStore.Audio.Media.ALBUM_ID};
        Cursor c = this.getContentResolver().query(uri, projection, MediaStore.Audio.Media.DATA + " like ? ", new String[]{"%/%"}, orderBy);
        if (c != null) {
            while (c.moveToNext()) {
                Log.e("CURSOR", String.valueOf(c));
                SongInfo audioModel = new SongInfo();
                String path = c.getString(0);
                String album = c.getString(1);
                String artist = c.getString(2);
                long albumArt = c.getLong(3);

                Uri artworkUri = Uri.parse("content://media/external/audio/albumart");
                Uri albumArtUri = ContentUris.withAppendedId(artworkUri, albumArt);

                String name = path.substring(path.lastIndexOf("/") + 1);

                int color = Color.argb(255, rnd.nextInt(256), rnd.nextInt(256), rnd.nextInt(256));

                audioModel.setName(name);
                audioModel.setAlbum(album);
                audioModel.setArtist(artist);
                audioModel.setPath(path);
                audioModel.setAlbumArt(albumArtUri);
                audioModel.setColor(color);
                // Log.e("Name :" + name, " Album :" + album);
                // Log.e("Path :" + path, " Artist :" + artist);

                songInfoList.add(audioModel);
            }
            c.close();
        }
        return songInfoList;
    }

    @Override
    public void setCurrentData(SongInfo info) {
        Log.e("INFO", info.getName());
        TextView title = findViewById(R.id.mini_song_name);
        TextView artist = findViewById(R.id.mini_artist_name);
        title.setText(info.getName());
        artist.setText(info.getArtist());
        bottomSheet.setState(BottomSheetBehavior.STATE_COLLAPSED);
    }
}
